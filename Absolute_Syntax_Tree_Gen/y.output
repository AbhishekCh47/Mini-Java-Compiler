Terminals unused in grammar

   T_FINAL
   T_OR
   T_AND
   T_XOR
   T_LS
   T_RS
   T_PRINT


Grammar

    0 $accept: START $end

    1 START: MODIFIER T_CLASS T_ID '{' Method_declaration '}'

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' T_ARGS ')' '{' S '}'

    3 MODIFIER: W1 W2

    4 W1: T_PUBLIC
    5   | T_PRIVATE

    6 W2: T_STATIC
    7   | %empty

    8 S: DECLR ';' S
    9  | ASSGN ';' S
   10  | IF ELSE S
   11  | FOR '{' S '}' S
   12  | UNREXPR ';' S
   13  | %empty

   14 ASSGN: Assignment
   15      | Array_initialisation

   16 DECLR: Variable_declaration
   17      | Array_declaration

   18 IF: T_IF '(' LOGICALOREXPR ')' '{' S '}'

   19 ELSE: T_ELSE '{' S '}'
   20     | %empty

   21 FOR: T_FOR '(' ';' ';' ')'
   22    | T_FOR '(' INIT ';' ';' ')'
   23    | T_FOR '(' INIT ';' LOGICALOREXPR ';' ')'
   24    | T_FOR '(' INIT ';' ';' UNREXPR ')'
   25    | T_FOR '(' ';' LOGICALOREXPR ';' ')'
   26    | T_FOR '(' ';' LOGICALOREXPR ';' UNREXPR ')'
   27    | T_FOR '(' INIT ';' LOGICALOREXPR ';' UNREXPR ')'
   28    | T_FOR '(' ';' ';' UNREXPR ')'

   29 INIT: Variable_declaration
   30     | Assignment

   31 UNREXPR: T_INC Expr
   32        | T_DEC Expr
   33        | Expr T_INC
   34        | Expr T_DEC
   35        | LOGICALOREXPR

   36 Variable_declaration: Type Expr T_ASSGN LOGICALOREXPR X
   37                     | Type Expr X

   38 X: ',' Assignment1 X
   39  | ',' T_ID X
   40  | %empty

   41 Assignment1: Expr Assignment_operator LOGICALOREXPR

   42 Array_declaration: Type B Expr
   43                  | Type Expr B

   44 B: '[' ']' B
   45  | '[' ']'

   46 BB: '[' BNUM ']'
   47   | '[' BNUM ']' BB

   48 BNUM: T_NUM
   49     | T_ID

   50 Array_initialisation: Array_declaration Assignment_operator K

   51 K: V
   52  | V ',' K
   53  | T_NEW Type BB

   54 V: T_NUM
   55  | R

   56 R: '{' K '}'

   57 Type: T_INT
   58     | T_DOUBLE
   59     | T_CHAR
   60     | T_STRING
   61     | T_VOID

   62 Assignment: Expr Assignment_operator LOGICALOREXPR

   63 Assignment_operator: T_ASSGN
   64                    | T_ADDASSGN
   65                    | T_SUBASSGN
   66                    | T_MULASSGN
   67                    | T_DIVASSGN
   68                    | T_ANDASSGN
   69                    | T_ORASSGN
   70                    | T_XORASSGN
   71                    | T_MODASSGN

   72 LOGICALOREXPR: LOGICALOREXPR T_LOGOR LOGICALANDEXPR
   73              | LOGICALANDEXPR

   74 LOGICALANDEXPR: LOGICALANDEXPR T_LOGAND EQUALITYEXPR
   75               | EQUALITYEXPR

   76 EQUALITYEXPR: EQUALITYEXPR T_EQ RELEXPR
   77             | EQUALITYEXPR T_NEQ RELEXPR
   78             | RELEXPR

   79 RELEXPR: RELEXPR T_LT ADDEXPR
   80        | RELEXPR T_GT ADDEXPR
   81        | RELEXPR T_LTEQ ADDEXPR
   82        | RELEXPR T_GTEQ ADDEXPR
   83        | ADDEXPR

   84 ADDEXPR: ADDEXPR T_ADD MULTEXPR
   85        | ADDEXPR T_SUB MULTEXPR
   86        | MULTEXPR

   87 MULTEXPR: MULTEXPR T_MUL Expr
   88         | MULTEXPR T_DIV Expr
   89         | MULTEXPR T_MOD Expr
   90         | Expr

   91 Expr: '(' LOGICALOREXPR ')'
   92     | T_NUM
   93     | T_ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 21 22 23 24 25 26 27 28 91
')' (41) 2 18 21 22 23 24 25 26 27 28 91
',' (44) 38 39 52
';' (59) 8 9 12 21 22 23 24 25 26 27 28
'[' (91) 2 44 45 46 47
']' (93) 2 44 45 46 47
'{' (123) 1 2 11 18 19 56
'}' (125) 1 2 11 18 19 56
error (256)
T_CLASS (258) 1
T_PUBLIC (259) 4
T_PRIVATE (260) 5
T_STATIC (261) 6
T_FINAL (262)
T_VOID (263) 61
T_INT (264) 57
T_CHAR (265) 59
T_DOUBLE (266) 58
T_IF (267) 18
T_ELSE (268) 19
T_NEW (269) 53
T_INC (270) 31 33
T_DEC (271) 32 34
T_LOGOR (272) 72
T_LOGAND (273) 74
T_OR (274)
T_AND (275)
T_EQ (276) 76
T_NEQ (277) 77
T_GTEQ (278) 82
T_LTEQ (279) 81
T_ADD (280) 84
T_SUB (281) 85
T_MUL (282) 87
T_DIV (283) 88
T_GT (284) 80
T_LT (285) 79
T_XOR (286)
T_MOD (287) 89
T_LS (288)
T_RS (289)
T_NUM (290) 48 54 92
T_ID (291) 1 39 49 93
T_STRING (292) 60
T_ARGS (293) 2
T_PRINT (294)
T_FOR (295) 21 22 23 24 25 26 27 28
T_MAIN (296) 2
T_ASSGN (297) 36 63
T_MULASSGN (298) 66
T_DIVASSGN (299) 67
T_MODASSGN (300) 71
T_ADDASSGN (301) 64
T_SUBASSGN (302) 65
T_ANDASSGN (303) 68
T_XORASSGN (304) 70
T_ORASSGN (305) 69


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
START (60)
    on left: 1, on right: 0
Method_declaration (61)
    on left: 2, on right: 1
MODIFIER (62)
    on left: 3, on right: 1 2
W1 (63)
    on left: 4 5, on right: 3
W2 (64)
    on left: 6 7, on right: 3
S (65)
    on left: 8 9 10 11 12 13, on right: 2 8 9 10 11 12 18 19
ASSGN (66)
    on left: 14 15, on right: 9
DECLR (67)
    on left: 16 17, on right: 8
IF (68)
    on left: 18, on right: 10
ELSE (69)
    on left: 19 20, on right: 10
FOR (70)
    on left: 21 22 23 24 25 26 27 28, on right: 11
INIT (71)
    on left: 29 30, on right: 22 23 24 27
UNREXPR (72)
    on left: 31 32 33 34 35, on right: 12 24 26 27 28
Variable_declaration (73)
    on left: 36 37, on right: 16 29
X (74)
    on left: 38 39 40, on right: 36 37 38 39
Assignment1 (75)
    on left: 41, on right: 38
Array_declaration (76)
    on left: 42 43, on right: 17 50
B (77)
    on left: 44 45, on right: 42 43 44
BB (78)
    on left: 46 47, on right: 47 53
BNUM (79)
    on left: 48 49, on right: 46 47
Array_initialisation (80)
    on left: 50, on right: 15
K (81)
    on left: 51 52 53, on right: 50 52 56
V (82)
    on left: 54 55, on right: 51 52
R (83)
    on left: 56, on right: 55
Type (84)
    on left: 57 58 59 60 61, on right: 2 36 37 42 43 53
Assignment (85)
    on left: 62, on right: 14 30
Assignment_operator (86)
    on left: 63 64 65 66 67 68 69 70 71, on right: 41 50 62
LOGICALOREXPR (87)
    on left: 72 73, on right: 18 23 25 26 27 35 36 41 62 72 91
LOGICALANDEXPR (88)
    on left: 74 75, on right: 72 73 74
EQUALITYEXPR (89)
    on left: 76 77 78, on right: 74 75 76 77
RELEXPR (90)
    on left: 79 80 81 82 83, on right: 76 77 78 79 80 81 82
ADDEXPR (91)
    on left: 84 85 86, on right: 79 80 81 82 83 84 85
MULTEXPR (92)
    on left: 87 88 89 90, on right: 84 85 86 87 88 89
Expr (93)
    on left: 91 92 93, on right: 31 32 33 34 36 37 41 42 43 62 87 88
    89 90


State 0

    0 $accept: . START $end

    T_PUBLIC   shift, and go to state 1
    T_PRIVATE  shift, and go to state 2

    START     go to state 3
    MODIFIER  go to state 4
    W1        go to state 5


State 1

    4 W1: T_PUBLIC .

    $default  reduce using rule 4 (W1)


State 2

    5 W1: T_PRIVATE .

    $default  reduce using rule 5 (W1)


State 3

    0 $accept: START . $end

    $end  shift, and go to state 6


State 4

    1 START: MODIFIER . T_CLASS T_ID '{' Method_declaration '}'

    T_CLASS  shift, and go to state 7


State 5

    3 MODIFIER: W1 . W2

    T_STATIC  shift, and go to state 8

    $default  reduce using rule 7 (W2)

    W2  go to state 9


State 6

    0 $accept: START $end .

    $default  accept


State 7

    1 START: MODIFIER T_CLASS . T_ID '{' Method_declaration '}'

    T_ID  shift, and go to state 10


State 8

    6 W2: T_STATIC .

    $default  reduce using rule 6 (W2)


State 9

    3 MODIFIER: W1 W2 .

    $default  reduce using rule 3 (MODIFIER)


State 10

    1 START: MODIFIER T_CLASS T_ID . '{' Method_declaration '}'

    '{'  shift, and go to state 11


State 11

    1 START: MODIFIER T_CLASS T_ID '{' . Method_declaration '}'

    T_PUBLIC   shift, and go to state 1
    T_PRIVATE  shift, and go to state 2

    Method_declaration  go to state 12
    MODIFIER            go to state 13
    W1                  go to state 5


State 12

    1 START: MODIFIER T_CLASS T_ID '{' Method_declaration . '}'

    '}'  shift, and go to state 14


State 13

    2 Method_declaration: MODIFIER . Type T_MAIN '(' Type '[' ']' T_ARGS ')' '{' S '}'

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_STRING  shift, and go to state 19

    Type  go to state 20


State 14

    1 START: MODIFIER T_CLASS T_ID '{' Method_declaration '}' .

    $default  reduce using rule 1 (START)


State 15

   61 Type: T_VOID .

    $default  reduce using rule 61 (Type)


State 16

   57 Type: T_INT .

    $default  reduce using rule 57 (Type)


State 17

   59 Type: T_CHAR .

    $default  reduce using rule 59 (Type)


State 18

   58 Type: T_DOUBLE .

    $default  reduce using rule 58 (Type)


State 19

   60 Type: T_STRING .

    $default  reduce using rule 60 (Type)


State 20

    2 Method_declaration: MODIFIER Type . T_MAIN '(' Type '[' ']' T_ARGS ')' '{' S '}'

    T_MAIN  shift, and go to state 21


State 21

    2 Method_declaration: MODIFIER Type T_MAIN . '(' Type '[' ']' T_ARGS ')' '{' S '}'

    '('  shift, and go to state 22


State 22

    2 Method_declaration: MODIFIER Type T_MAIN '(' . Type '[' ']' T_ARGS ')' '{' S '}'

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_STRING  shift, and go to state 19

    Type  go to state 23


State 23

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type . '[' ']' T_ARGS ')' '{' S '}'

    '['  shift, and go to state 24


State 24

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' . ']' T_ARGS ')' '{' S '}'

    ']'  shift, and go to state 25


State 25

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' . T_ARGS ')' '{' S '}'

    T_ARGS  shift, and go to state 26


State 26

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' T_ARGS . ')' '{' S '}'

    ')'  shift, and go to state 27


State 27

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' T_ARGS ')' . '{' S '}'

    '{'  shift, and go to state 28


State 28

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' T_ARGS ')' '{' . S '}'

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 36
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 29

   18 IF: T_IF . '(' LOGICALOREXPR ')' '{' S '}'

    '('  shift, and go to state 54


State 30

   31 UNREXPR: T_INC . Expr

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 55


State 31

   32 UNREXPR: T_DEC . Expr

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 56


State 32

   92 Expr: T_NUM .

    $default  reduce using rule 92 (Expr)


State 33

   93 Expr: T_ID .

    $default  reduce using rule 93 (Expr)


State 34

   21 FOR: T_FOR . '(' ';' ';' ')'
   22    | T_FOR . '(' INIT ';' ';' ')'
   23    | T_FOR . '(' INIT ';' LOGICALOREXPR ';' ')'
   24    | T_FOR . '(' INIT ';' ';' UNREXPR ')'
   25    | T_FOR . '(' ';' LOGICALOREXPR ';' ')'
   26    | T_FOR . '(' ';' LOGICALOREXPR ';' UNREXPR ')'
   27    | T_FOR . '(' INIT ';' LOGICALOREXPR ';' UNREXPR ')'
   28    | T_FOR . '(' ';' ';' UNREXPR ')'

    '('  shift, and go to state 57


State 35

   91 Expr: '(' . LOGICALOREXPR ')'

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    LOGICALOREXPR   go to state 58
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 36

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' T_ARGS ')' '{' S . '}'

    '}'  shift, and go to state 60


State 37

    9 S: ASSGN . ';' S

    ';'  shift, and go to state 61


State 38

    8 S: DECLR . ';' S

    ';'  shift, and go to state 62


State 39

   10 S: IF . ELSE S

    T_ELSE  shift, and go to state 63

    $default  reduce using rule 20 (ELSE)

    ELSE  go to state 64


State 40

   11 S: FOR . '{' S '}' S

    '{'  shift, and go to state 65


State 41

   12 S: UNREXPR . ';' S

    ';'  shift, and go to state 66


State 42

   16 DECLR: Variable_declaration .

    $default  reduce using rule 16 (DECLR)


State 43

   17 DECLR: Array_declaration .
   50 Array_initialisation: Array_declaration . Assignment_operator K

    T_ASSGN     shift, and go to state 67
    T_MULASSGN  shift, and go to state 68
    T_DIVASSGN  shift, and go to state 69
    T_MODASSGN  shift, and go to state 70
    T_ADDASSGN  shift, and go to state 71
    T_SUBASSGN  shift, and go to state 72
    T_ANDASSGN  shift, and go to state 73
    T_XORASSGN  shift, and go to state 74
    T_ORASSGN   shift, and go to state 75

    $default  reduce using rule 17 (DECLR)

    Assignment_operator  go to state 76


State 44

   15 ASSGN: Array_initialisation .

    $default  reduce using rule 15 (ASSGN)


State 45

   36 Variable_declaration: Type . Expr T_ASSGN LOGICALOREXPR X
   37                     | Type . Expr X
   42 Array_declaration: Type . B Expr
   43                  | Type . Expr B

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    '['    shift, and go to state 77

    B     go to state 78
    Expr  go to state 79


State 46

   14 ASSGN: Assignment .

    $default  reduce using rule 14 (ASSGN)


State 47

   35 UNREXPR: LOGICALOREXPR .
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80

    $default  reduce using rule 35 (UNREXPR)


State 48

   73 LOGICALOREXPR: LOGICALANDEXPR .
   74 LOGICALANDEXPR: LOGICALANDEXPR . T_LOGAND EQUALITYEXPR

    T_LOGAND  shift, and go to state 81

    $default  reduce using rule 73 (LOGICALOREXPR)


State 49

   75 LOGICALANDEXPR: EQUALITYEXPR .
   76 EQUALITYEXPR: EQUALITYEXPR . T_EQ RELEXPR
   77             | EQUALITYEXPR . T_NEQ RELEXPR

    T_EQ   shift, and go to state 82
    T_NEQ  shift, and go to state 83

    $default  reduce using rule 75 (LOGICALANDEXPR)


State 50

   78 EQUALITYEXPR: RELEXPR .
   79 RELEXPR: RELEXPR . T_LT ADDEXPR
   80        | RELEXPR . T_GT ADDEXPR
   81        | RELEXPR . T_LTEQ ADDEXPR
   82        | RELEXPR . T_GTEQ ADDEXPR

    T_GTEQ  shift, and go to state 84
    T_LTEQ  shift, and go to state 85
    T_GT    shift, and go to state 86
    T_LT    shift, and go to state 87

    $default  reduce using rule 78 (EQUALITYEXPR)


State 51

   83 RELEXPR: ADDEXPR .
   84 ADDEXPR: ADDEXPR . T_ADD MULTEXPR
   85        | ADDEXPR . T_SUB MULTEXPR

    T_ADD  shift, and go to state 88
    T_SUB  shift, and go to state 89

    $default  reduce using rule 83 (RELEXPR)


State 52

   86 ADDEXPR: MULTEXPR .
   87 MULTEXPR: MULTEXPR . T_MUL Expr
   88         | MULTEXPR . T_DIV Expr
   89         | MULTEXPR . T_MOD Expr

    T_MUL  shift, and go to state 90
    T_DIV  shift, and go to state 91
    T_MOD  shift, and go to state 92

    $default  reduce using rule 86 (ADDEXPR)


State 53

   33 UNREXPR: Expr . T_INC
   34        | Expr . T_DEC
   62 Assignment: Expr . Assignment_operator LOGICALOREXPR
   90 MULTEXPR: Expr .

    T_INC       shift, and go to state 93
    T_DEC       shift, and go to state 94
    T_ASSGN     shift, and go to state 67
    T_MULASSGN  shift, and go to state 68
    T_DIVASSGN  shift, and go to state 69
    T_MODASSGN  shift, and go to state 70
    T_ADDASSGN  shift, and go to state 71
    T_SUBASSGN  shift, and go to state 72
    T_ANDASSGN  shift, and go to state 73
    T_XORASSGN  shift, and go to state 74
    T_ORASSGN   shift, and go to state 75

    $default  reduce using rule 90 (MULTEXPR)

    Assignment_operator  go to state 95


State 54

   18 IF: T_IF '(' . LOGICALOREXPR ')' '{' S '}'

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    LOGICALOREXPR   go to state 96
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 55

   31 UNREXPR: T_INC Expr .

    $default  reduce using rule 31 (UNREXPR)


State 56

   32 UNREXPR: T_DEC Expr .

    $default  reduce using rule 32 (UNREXPR)


State 57

   21 FOR: T_FOR '(' . ';' ';' ')'
   22    | T_FOR '(' . INIT ';' ';' ')'
   23    | T_FOR '(' . INIT ';' LOGICALOREXPR ';' ')'
   24    | T_FOR '(' . INIT ';' ';' UNREXPR ')'
   25    | T_FOR '(' . ';' LOGICALOREXPR ';' ')'
   26    | T_FOR '(' . ';' LOGICALOREXPR ';' UNREXPR ')'
   27    | T_FOR '(' . INIT ';' LOGICALOREXPR ';' UNREXPR ')'
   28    | T_FOR '(' . ';' ';' UNREXPR ')'

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    '('       shift, and go to state 35
    ';'       shift, and go to state 97

    INIT                  go to state 98
    Variable_declaration  go to state 99
    Type                  go to state 100
    Assignment            go to state 101
    Expr                  go to state 102


State 58

   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR
   91 Expr: '(' LOGICALOREXPR . ')'

    T_LOGOR  shift, and go to state 80
    ')'      shift, and go to state 103


State 59

   90 MULTEXPR: Expr .

    $default  reduce using rule 90 (MULTEXPR)


State 60

    2 Method_declaration: MODIFIER Type T_MAIN '(' Type '[' ']' T_ARGS ')' '{' S '}' .

    $default  reduce using rule 2 (Method_declaration)


State 61

    9 S: ASSGN ';' . S

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 104
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 62

    8 S: DECLR ';' . S

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 105
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 63

   19 ELSE: T_ELSE . '{' S '}'

    '{'  shift, and go to state 106


State 64

   10 S: IF ELSE . S

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 107
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 65

   11 S: FOR '{' . S '}' S

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 108
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 66

   12 S: UNREXPR ';' . S

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 109
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 67

   63 Assignment_operator: T_ASSGN .

    $default  reduce using rule 63 (Assignment_operator)


State 68

   66 Assignment_operator: T_MULASSGN .

    $default  reduce using rule 66 (Assignment_operator)


State 69

   67 Assignment_operator: T_DIVASSGN .

    $default  reduce using rule 67 (Assignment_operator)


State 70

   71 Assignment_operator: T_MODASSGN .

    $default  reduce using rule 71 (Assignment_operator)


State 71

   64 Assignment_operator: T_ADDASSGN .

    $default  reduce using rule 64 (Assignment_operator)


State 72

   65 Assignment_operator: T_SUBASSGN .

    $default  reduce using rule 65 (Assignment_operator)


State 73

   68 Assignment_operator: T_ANDASSGN .

    $default  reduce using rule 68 (Assignment_operator)


State 74

   70 Assignment_operator: T_XORASSGN .

    $default  reduce using rule 70 (Assignment_operator)


State 75

   69 Assignment_operator: T_ORASSGN .

    $default  reduce using rule 69 (Assignment_operator)


State 76

   50 Array_initialisation: Array_declaration Assignment_operator . K

    T_NEW  shift, and go to state 110
    T_NUM  shift, and go to state 111
    '{'    shift, and go to state 112

    K  go to state 113
    V  go to state 114
    R  go to state 115


State 77

   44 B: '[' . ']' B
   45  | '[' . ']'

    ']'  shift, and go to state 116


State 78

   42 Array_declaration: Type B . Expr

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 117


State 79

   36 Variable_declaration: Type Expr . T_ASSGN LOGICALOREXPR X
   37                     | Type Expr . X
   43 Array_declaration: Type Expr . B

    T_ASSGN  shift, and go to state 118
    '['      shift, and go to state 77
    ','      shift, and go to state 119

    $default  reduce using rule 40 (X)

    X  go to state 120
    B  go to state 121


State 80

   72 LOGICALOREXPR: LOGICALOREXPR T_LOGOR . LOGICALANDEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    LOGICALANDEXPR  go to state 122
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 81

   74 LOGICALANDEXPR: LOGICALANDEXPR T_LOGAND . EQUALITYEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    EQUALITYEXPR  go to state 123
    RELEXPR       go to state 50
    ADDEXPR       go to state 51
    MULTEXPR      go to state 52
    Expr          go to state 59


State 82

   76 EQUALITYEXPR: EQUALITYEXPR T_EQ . RELEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    RELEXPR   go to state 124
    ADDEXPR   go to state 51
    MULTEXPR  go to state 52
    Expr      go to state 59


State 83

   77 EQUALITYEXPR: EQUALITYEXPR T_NEQ . RELEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    RELEXPR   go to state 125
    ADDEXPR   go to state 51
    MULTEXPR  go to state 52
    Expr      go to state 59


State 84

   82 RELEXPR: RELEXPR T_GTEQ . ADDEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    ADDEXPR   go to state 126
    MULTEXPR  go to state 52
    Expr      go to state 59


State 85

   81 RELEXPR: RELEXPR T_LTEQ . ADDEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    ADDEXPR   go to state 127
    MULTEXPR  go to state 52
    Expr      go to state 59


State 86

   80 RELEXPR: RELEXPR T_GT . ADDEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    ADDEXPR   go to state 128
    MULTEXPR  go to state 52
    Expr      go to state 59


State 87

   79 RELEXPR: RELEXPR T_LT . ADDEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    ADDEXPR   go to state 129
    MULTEXPR  go to state 52
    Expr      go to state 59


State 88

   84 ADDEXPR: ADDEXPR T_ADD . MULTEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    MULTEXPR  go to state 130
    Expr      go to state 59


State 89

   85 ADDEXPR: ADDEXPR T_SUB . MULTEXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    MULTEXPR  go to state 131
    Expr      go to state 59


State 90

   87 MULTEXPR: MULTEXPR T_MUL . Expr

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 132


State 91

   88 MULTEXPR: MULTEXPR T_DIV . Expr

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 133


State 92

   89 MULTEXPR: MULTEXPR T_MOD . Expr

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 134


State 93

   33 UNREXPR: Expr T_INC .

    $default  reduce using rule 33 (UNREXPR)


State 94

   34 UNREXPR: Expr T_DEC .

    $default  reduce using rule 34 (UNREXPR)


State 95

   62 Assignment: Expr Assignment_operator . LOGICALOREXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    LOGICALOREXPR   go to state 135
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 96

   18 IF: T_IF '(' LOGICALOREXPR . ')' '{' S '}'
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80
    ')'      shift, and go to state 136


State 97

   21 FOR: T_FOR '(' ';' . ';' ')'
   25    | T_FOR '(' ';' . LOGICALOREXPR ';' ')'
   26    | T_FOR '(' ';' . LOGICALOREXPR ';' UNREXPR ')'
   28    | T_FOR '(' ';' . ';' UNREXPR ')'

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    ';'    shift, and go to state 137

    LOGICALOREXPR   go to state 138
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 98

   22 FOR: T_FOR '(' INIT . ';' ';' ')'
   23    | T_FOR '(' INIT . ';' LOGICALOREXPR ';' ')'
   24    | T_FOR '(' INIT . ';' ';' UNREXPR ')'
   27    | T_FOR '(' INIT . ';' LOGICALOREXPR ';' UNREXPR ')'

    ';'  shift, and go to state 139


State 99

   29 INIT: Variable_declaration .

    $default  reduce using rule 29 (INIT)


State 100

   36 Variable_declaration: Type . Expr T_ASSGN LOGICALOREXPR X
   37                     | Type . Expr X

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    Expr  go to state 140


State 101

   30 INIT: Assignment .

    $default  reduce using rule 30 (INIT)


State 102

   62 Assignment: Expr . Assignment_operator LOGICALOREXPR

    T_ASSGN     shift, and go to state 67
    T_MULASSGN  shift, and go to state 68
    T_DIVASSGN  shift, and go to state 69
    T_MODASSGN  shift, and go to state 70
    T_ADDASSGN  shift, and go to state 71
    T_SUBASSGN  shift, and go to state 72
    T_ANDASSGN  shift, and go to state 73
    T_XORASSGN  shift, and go to state 74
    T_ORASSGN   shift, and go to state 75

    Assignment_operator  go to state 95


State 103

   91 Expr: '(' LOGICALOREXPR ')' .

    $default  reduce using rule 91 (Expr)


State 104

    9 S: ASSGN ';' S .

    $default  reduce using rule 9 (S)


State 105

    8 S: DECLR ';' S .

    $default  reduce using rule 8 (S)


State 106

   19 ELSE: T_ELSE '{' . S '}'

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 141
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 107

   10 S: IF ELSE S .

    $default  reduce using rule 10 (S)


State 108

   11 S: FOR '{' S . '}' S

    '}'  shift, and go to state 142


State 109

   12 S: UNREXPR ';' S .

    $default  reduce using rule 12 (S)


State 110

   53 K: T_NEW . Type BB

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_STRING  shift, and go to state 19

    Type  go to state 143


State 111

   54 V: T_NUM .

    $default  reduce using rule 54 (V)


State 112

   56 R: '{' . K '}'

    T_NEW  shift, and go to state 110
    T_NUM  shift, and go to state 111
    '{'    shift, and go to state 112

    K  go to state 144
    V  go to state 114
    R  go to state 115


State 113

   50 Array_initialisation: Array_declaration Assignment_operator K .

    $default  reduce using rule 50 (Array_initialisation)


State 114

   51 K: V .
   52  | V . ',' K

    ','  shift, and go to state 145

    $default  reduce using rule 51 (K)


State 115

   55 V: R .

    $default  reduce using rule 55 (V)


State 116

   44 B: '[' ']' . B
   45  | '[' ']' .

    '['  shift, and go to state 77

    $default  reduce using rule 45 (B)

    B  go to state 146


State 117

   42 Array_declaration: Type B Expr .

    $default  reduce using rule 42 (Array_declaration)


State 118

   36 Variable_declaration: Type Expr T_ASSGN . LOGICALOREXPR X

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    LOGICALOREXPR   go to state 147
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 119

   38 X: ',' . Assignment1 X
   39  | ',' . T_ID X

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 148
    '('    shift, and go to state 35

    Assignment1  go to state 149
    Expr         go to state 150


State 120

   37 Variable_declaration: Type Expr X .

    $default  reduce using rule 37 (Variable_declaration)


State 121

   43 Array_declaration: Type Expr B .

    $default  reduce using rule 43 (Array_declaration)


State 122

   72 LOGICALOREXPR: LOGICALOREXPR T_LOGOR LOGICALANDEXPR .
   74 LOGICALANDEXPR: LOGICALANDEXPR . T_LOGAND EQUALITYEXPR

    T_LOGAND  shift, and go to state 81

    $default  reduce using rule 72 (LOGICALOREXPR)


State 123

   74 LOGICALANDEXPR: LOGICALANDEXPR T_LOGAND EQUALITYEXPR .
   76 EQUALITYEXPR: EQUALITYEXPR . T_EQ RELEXPR
   77             | EQUALITYEXPR . T_NEQ RELEXPR

    T_EQ   shift, and go to state 82
    T_NEQ  shift, and go to state 83

    $default  reduce using rule 74 (LOGICALANDEXPR)


State 124

   76 EQUALITYEXPR: EQUALITYEXPR T_EQ RELEXPR .
   79 RELEXPR: RELEXPR . T_LT ADDEXPR
   80        | RELEXPR . T_GT ADDEXPR
   81        | RELEXPR . T_LTEQ ADDEXPR
   82        | RELEXPR . T_GTEQ ADDEXPR

    T_GTEQ  shift, and go to state 84
    T_LTEQ  shift, and go to state 85
    T_GT    shift, and go to state 86
    T_LT    shift, and go to state 87

    $default  reduce using rule 76 (EQUALITYEXPR)


State 125

   77 EQUALITYEXPR: EQUALITYEXPR T_NEQ RELEXPR .
   79 RELEXPR: RELEXPR . T_LT ADDEXPR
   80        | RELEXPR . T_GT ADDEXPR
   81        | RELEXPR . T_LTEQ ADDEXPR
   82        | RELEXPR . T_GTEQ ADDEXPR

    T_GTEQ  shift, and go to state 84
    T_LTEQ  shift, and go to state 85
    T_GT    shift, and go to state 86
    T_LT    shift, and go to state 87

    $default  reduce using rule 77 (EQUALITYEXPR)


State 126

   82 RELEXPR: RELEXPR T_GTEQ ADDEXPR .
   84 ADDEXPR: ADDEXPR . T_ADD MULTEXPR
   85        | ADDEXPR . T_SUB MULTEXPR

    T_ADD  shift, and go to state 88
    T_SUB  shift, and go to state 89

    $default  reduce using rule 82 (RELEXPR)


State 127

   81 RELEXPR: RELEXPR T_LTEQ ADDEXPR .
   84 ADDEXPR: ADDEXPR . T_ADD MULTEXPR
   85        | ADDEXPR . T_SUB MULTEXPR

    T_ADD  shift, and go to state 88
    T_SUB  shift, and go to state 89

    $default  reduce using rule 81 (RELEXPR)


State 128

   80 RELEXPR: RELEXPR T_GT ADDEXPR .
   84 ADDEXPR: ADDEXPR . T_ADD MULTEXPR
   85        | ADDEXPR . T_SUB MULTEXPR

    T_ADD  shift, and go to state 88
    T_SUB  shift, and go to state 89

    $default  reduce using rule 80 (RELEXPR)


State 129

   79 RELEXPR: RELEXPR T_LT ADDEXPR .
   84 ADDEXPR: ADDEXPR . T_ADD MULTEXPR
   85        | ADDEXPR . T_SUB MULTEXPR

    T_ADD  shift, and go to state 88
    T_SUB  shift, and go to state 89

    $default  reduce using rule 79 (RELEXPR)


State 130

   84 ADDEXPR: ADDEXPR T_ADD MULTEXPR .
   87 MULTEXPR: MULTEXPR . T_MUL Expr
   88         | MULTEXPR . T_DIV Expr
   89         | MULTEXPR . T_MOD Expr

    T_MUL  shift, and go to state 90
    T_DIV  shift, and go to state 91
    T_MOD  shift, and go to state 92

    $default  reduce using rule 84 (ADDEXPR)


State 131

   85 ADDEXPR: ADDEXPR T_SUB MULTEXPR .
   87 MULTEXPR: MULTEXPR . T_MUL Expr
   88         | MULTEXPR . T_DIV Expr
   89         | MULTEXPR . T_MOD Expr

    T_MUL  shift, and go to state 90
    T_DIV  shift, and go to state 91
    T_MOD  shift, and go to state 92

    $default  reduce using rule 85 (ADDEXPR)


State 132

   87 MULTEXPR: MULTEXPR T_MUL Expr .

    $default  reduce using rule 87 (MULTEXPR)


State 133

   88 MULTEXPR: MULTEXPR T_DIV Expr .

    $default  reduce using rule 88 (MULTEXPR)


State 134

   89 MULTEXPR: MULTEXPR T_MOD Expr .

    $default  reduce using rule 89 (MULTEXPR)


State 135

   62 Assignment: Expr Assignment_operator LOGICALOREXPR .
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80

    $default  reduce using rule 62 (Assignment)


State 136

   18 IF: T_IF '(' LOGICALOREXPR ')' . '{' S '}'

    '{'  shift, and go to state 151


State 137

   21 FOR: T_FOR '(' ';' ';' . ')'
   28    | T_FOR '(' ';' ';' . UNREXPR ')'

    T_INC  shift, and go to state 30
    T_DEC  shift, and go to state 31
    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    ')'    shift, and go to state 152

    UNREXPR         go to state 153
    LOGICALOREXPR   go to state 47
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 154


State 138

   25 FOR: T_FOR '(' ';' LOGICALOREXPR . ';' ')'
   26    | T_FOR '(' ';' LOGICALOREXPR . ';' UNREXPR ')'
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80
    ';'      shift, and go to state 155


State 139

   22 FOR: T_FOR '(' INIT ';' . ';' ')'
   23    | T_FOR '(' INIT ';' . LOGICALOREXPR ';' ')'
   24    | T_FOR '(' INIT ';' . ';' UNREXPR ')'
   27    | T_FOR '(' INIT ';' . LOGICALOREXPR ';' UNREXPR ')'

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    ';'    shift, and go to state 156

    LOGICALOREXPR   go to state 157
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 140

   36 Variable_declaration: Type Expr . T_ASSGN LOGICALOREXPR X
   37                     | Type Expr . X

    T_ASSGN  shift, and go to state 118
    ','      shift, and go to state 119

    $default  reduce using rule 40 (X)

    X  go to state 120


State 141

   19 ELSE: T_ELSE '{' S . '}'

    '}'  shift, and go to state 158


State 142

   11 S: FOR '{' S '}' . S

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 159
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 143

   53 K: T_NEW Type . BB

    '['  shift, and go to state 160

    BB  go to state 161


State 144

   56 R: '{' K . '}'

    '}'  shift, and go to state 162


State 145

   52 K: V ',' . K

    T_NEW  shift, and go to state 110
    T_NUM  shift, and go to state 111
    '{'    shift, and go to state 112

    K  go to state 163
    V  go to state 114
    R  go to state 115


State 146

   44 B: '[' ']' B .

    $default  reduce using rule 44 (B)


State 147

   36 Variable_declaration: Type Expr T_ASSGN LOGICALOREXPR . X
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80
    ','      shift, and go to state 119

    $default  reduce using rule 40 (X)

    X  go to state 164


State 148

   39 X: ',' T_ID . X
   93 Expr: T_ID .

    ','  shift, and go to state 119

    ';'       reduce using rule 40 (X)
    $default  reduce using rule 93 (Expr)

    X  go to state 165


State 149

   38 X: ',' Assignment1 . X

    ','  shift, and go to state 119

    $default  reduce using rule 40 (X)

    X  go to state 166


State 150

   41 Assignment1: Expr . Assignment_operator LOGICALOREXPR

    T_ASSGN     shift, and go to state 67
    T_MULASSGN  shift, and go to state 68
    T_DIVASSGN  shift, and go to state 69
    T_MODASSGN  shift, and go to state 70
    T_ADDASSGN  shift, and go to state 71
    T_SUBASSGN  shift, and go to state 72
    T_ANDASSGN  shift, and go to state 73
    T_XORASSGN  shift, and go to state 74
    T_ORASSGN   shift, and go to state 75

    Assignment_operator  go to state 167


State 151

   18 IF: T_IF '(' LOGICALOREXPR ')' '{' . S '}'

    T_VOID    shift, and go to state 15
    T_INT     shift, and go to state 16
    T_CHAR    shift, and go to state 17
    T_DOUBLE  shift, and go to state 18
    T_IF      shift, and go to state 29
    T_INC     shift, and go to state 30
    T_DEC     shift, and go to state 31
    T_NUM     shift, and go to state 32
    T_ID      shift, and go to state 33
    T_STRING  shift, and go to state 19
    T_FOR     shift, and go to state 34
    '('       shift, and go to state 35

    $default  reduce using rule 13 (S)

    S                     go to state 168
    ASSGN                 go to state 37
    DECLR                 go to state 38
    IF                    go to state 39
    FOR                   go to state 40
    UNREXPR               go to state 41
    Variable_declaration  go to state 42
    Array_declaration     go to state 43
    Array_initialisation  go to state 44
    Type                  go to state 45
    Assignment            go to state 46
    LOGICALOREXPR         go to state 47
    LOGICALANDEXPR        go to state 48
    EQUALITYEXPR          go to state 49
    RELEXPR               go to state 50
    ADDEXPR               go to state 51
    MULTEXPR              go to state 52
    Expr                  go to state 53


State 152

   21 FOR: T_FOR '(' ';' ';' ')' .

    $default  reduce using rule 21 (FOR)


State 153

   28 FOR: T_FOR '(' ';' ';' UNREXPR . ')'

    ')'  shift, and go to state 169


State 154

   33 UNREXPR: Expr . T_INC
   34        | Expr . T_DEC
   90 MULTEXPR: Expr .

    T_INC  shift, and go to state 93
    T_DEC  shift, and go to state 94

    $default  reduce using rule 90 (MULTEXPR)


State 155

   25 FOR: T_FOR '(' ';' LOGICALOREXPR ';' . ')'
   26    | T_FOR '(' ';' LOGICALOREXPR ';' . UNREXPR ')'

    T_INC  shift, and go to state 30
    T_DEC  shift, and go to state 31
    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    ')'    shift, and go to state 170

    UNREXPR         go to state 171
    LOGICALOREXPR   go to state 47
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 154


State 156

   22 FOR: T_FOR '(' INIT ';' ';' . ')'
   24    | T_FOR '(' INIT ';' ';' . UNREXPR ')'

    T_INC  shift, and go to state 30
    T_DEC  shift, and go to state 31
    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    ')'    shift, and go to state 172

    UNREXPR         go to state 173
    LOGICALOREXPR   go to state 47
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 154


State 157

   23 FOR: T_FOR '(' INIT ';' LOGICALOREXPR . ';' ')'
   27    | T_FOR '(' INIT ';' LOGICALOREXPR . ';' UNREXPR ')'
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80
    ';'      shift, and go to state 174


State 158

   19 ELSE: T_ELSE '{' S '}' .

    $default  reduce using rule 19 (ELSE)


State 159

   11 S: FOR '{' S '}' S .

    $default  reduce using rule 11 (S)


State 160

   46 BB: '[' . BNUM ']'
   47   | '[' . BNUM ']' BB

    T_NUM  shift, and go to state 175
    T_ID   shift, and go to state 176

    BNUM  go to state 177


State 161

   53 K: T_NEW Type BB .

    $default  reduce using rule 53 (K)


State 162

   56 R: '{' K '}' .

    $default  reduce using rule 56 (R)


State 163

   52 K: V ',' K .

    $default  reduce using rule 52 (K)


State 164

   36 Variable_declaration: Type Expr T_ASSGN LOGICALOREXPR X .

    $default  reduce using rule 36 (Variable_declaration)


State 165

   39 X: ',' T_ID X .

    $default  reduce using rule 39 (X)


State 166

   38 X: ',' Assignment1 X .

    $default  reduce using rule 38 (X)


State 167

   41 Assignment1: Expr Assignment_operator . LOGICALOREXPR

    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35

    LOGICALOREXPR   go to state 178
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 59


State 168

   18 IF: T_IF '(' LOGICALOREXPR ')' '{' S . '}'

    '}'  shift, and go to state 179


State 169

   28 FOR: T_FOR '(' ';' ';' UNREXPR ')' .

    $default  reduce using rule 28 (FOR)


State 170

   25 FOR: T_FOR '(' ';' LOGICALOREXPR ';' ')' .

    $default  reduce using rule 25 (FOR)


State 171

   26 FOR: T_FOR '(' ';' LOGICALOREXPR ';' UNREXPR . ')'

    ')'  shift, and go to state 180


State 172

   22 FOR: T_FOR '(' INIT ';' ';' ')' .

    $default  reduce using rule 22 (FOR)


State 173

   24 FOR: T_FOR '(' INIT ';' ';' UNREXPR . ')'

    ')'  shift, and go to state 181


State 174

   23 FOR: T_FOR '(' INIT ';' LOGICALOREXPR ';' . ')'
   27    | T_FOR '(' INIT ';' LOGICALOREXPR ';' . UNREXPR ')'

    T_INC  shift, and go to state 30
    T_DEC  shift, and go to state 31
    T_NUM  shift, and go to state 32
    T_ID   shift, and go to state 33
    '('    shift, and go to state 35
    ')'    shift, and go to state 182

    UNREXPR         go to state 183
    LOGICALOREXPR   go to state 47
    LOGICALANDEXPR  go to state 48
    EQUALITYEXPR    go to state 49
    RELEXPR         go to state 50
    ADDEXPR         go to state 51
    MULTEXPR        go to state 52
    Expr            go to state 154


State 175

   48 BNUM: T_NUM .

    $default  reduce using rule 48 (BNUM)


State 176

   49 BNUM: T_ID .

    $default  reduce using rule 49 (BNUM)


State 177

   46 BB: '[' BNUM . ']'
   47   | '[' BNUM . ']' BB

    ']'  shift, and go to state 184


State 178

   41 Assignment1: Expr Assignment_operator LOGICALOREXPR .
   72 LOGICALOREXPR: LOGICALOREXPR . T_LOGOR LOGICALANDEXPR

    T_LOGOR  shift, and go to state 80

    $default  reduce using rule 41 (Assignment1)


State 179

   18 IF: T_IF '(' LOGICALOREXPR ')' '{' S '}' .

    $default  reduce using rule 18 (IF)


State 180

   26 FOR: T_FOR '(' ';' LOGICALOREXPR ';' UNREXPR ')' .

    $default  reduce using rule 26 (FOR)


State 181

   24 FOR: T_FOR '(' INIT ';' ';' UNREXPR ')' .

    $default  reduce using rule 24 (FOR)


State 182

   23 FOR: T_FOR '(' INIT ';' LOGICALOREXPR ';' ')' .

    $default  reduce using rule 23 (FOR)


State 183

   27 FOR: T_FOR '(' INIT ';' LOGICALOREXPR ';' UNREXPR . ')'

    ')'  shift, and go to state 185


State 184

   46 BB: '[' BNUM ']' .
   47   | '[' BNUM ']' . BB

    '['  shift, and go to state 160

    $default  reduce using rule 46 (BB)

    BB  go to state 186


State 185

   27 FOR: T_FOR '(' INIT ';' LOGICALOREXPR ';' UNREXPR ')' .

    $default  reduce using rule 27 (FOR)


State 186

   47 BB: '[' BNUM ']' BB .

    $default  reduce using rule 47 (BB)
